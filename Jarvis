def speak(audio):
    pass  # For now, we will write the conditions later.
import pyttsx3

engine = pyttsx3.init('sapi5')

voices= engine.getProperty('voices') #getting details of current voice

engine.setProperty('voice', voice[0].id)
def speak  (audio):

  engine.say(audio)

engine.runAndWait() #Without this command, speech will not be audible to us.
if __name__ == "__main__":
  speak ( "Code With Harry" )

import datetime


def wishme():


   hour = int ( datetime.datetime.now ().hour )

import speechRecognition as sr


def takeCommand():
    # It takes microphone input from the user and returns string output

    r = sr.Recognizer ()
    with sr.Microphone () as source:
        print("Listening...")
        r.pause_threshold = 1
        assert isinstance ( sourceobject, )
        audio = r.listen ( source )

try:
        print("Recognizing...")
        query = r.recognize_google(audio, language='en-in') #Using google for voice recognition.
        print("User said: {query}\n ")  #User query will be printed.

except Exception as e:
        # print(e)
        print("Say that again please...")   #Say that again will be printed in case of improper voice
 #None string will be returned


if __name__ == "__main__":
     wishMe()

while True:
    # if 1:
        query = takeCommand().lower() #Converting user query into lower case

        # Logic for executing tasks based on query
        if 'wikipedia' in query:  #if wikipedia found in the query then this block will be executed
            speak('Searching Wikipedia...')
            query = query.replace("wikipedia", "")
            results = wikipedia.summary(query, sentences=2)
            speak("According to Wikipedia")
            print(results)
            speak(results)
